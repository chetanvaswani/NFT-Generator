// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  generator = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ARTIST
  CREATOR
  CONSUMER
}

model User {
  id        Int      @id @default(autoincrement())
  type      UserType
  name      String
  username  String   @unique
  mobNumber String?  @map("mob_number")
  email     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  artist    Artist?  @relation("UserToArtist")
  creator   Creator? @relation("UserToCreator")
  consumer  Consumer? @relation("UserToConsumer")

  @@index([username], name: "idx_user_username")
  @@index([email], name: "idx_user_email")
  @@map("users")
}

model Creator {
  id     Int    @id @default(autoincrement())
  userId Int    @unique @map("user_id")
  user   User   @relation("UserToCreator", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("creators")
}

model Consumer {
  id     Int    @id @default(autoincrement())
  userId Int    @unique @map("user_id")
  user   User   @relation("UserToConsumer", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("consumers")
}

model Artist {
  id     Int    @id @default(autoincrement())
  userId Int    @unique @map("user_id")
  user   User   @relation("UserToArtist", fields: [userId], references: [id], onDelete: Cascade)

  collections Collection[]
  Layers Layers[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("artists")
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  coverImage  String   @map("cover_image")
  artistId    Int      @map("artist_id")
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  categories  Category[]
  Layers Layers[]

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([artistId], name: "idx_collection_artist_id")
  @@map("collections")
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String
  collectionId Int      @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  layers       Layers[]

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([name, collectionId], name: "uniq_category_name_per_collection")
  @@index([collectionId], name: "idx_category_collection_id")
  @@map("categories")
}

model Layers {
  id           Int          @id @default(autoincrement())
  imageUrl     String       @map("image_url")
  traitName    String       @map("trait_name")
  createdAt    DateTime     @default(now()) @map("created_at")

  artistId     Int?         @map("artist_id")
  artist       Artist?      @relation(fields: [artistId], references: [id], onDelete: Cascade)

  collectionId Int?         @map("collection_id")
  collection   Collection?  @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  categoryId   Int?          @map("category_id")
  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([artistId], name: "idx_layer_images_artist_id")
  @@index([collectionId], name: "idx_layer_images_collection_id")
  @@index([categoryId], name: "idx_layer_images_category_id")
  @@map("layer_images")
}

model NftCollection {
  id            Int       @id @default(autoincrement())
  name          String
  symbol        String     @unique
  description   String?
  coverImageUrl String?     @map("cover_image_url")
  creatorName   String
  blockchain    String
  isMinted      Boolean    @default(false)

  nfts          Nft[]

  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("nft_collections")
}

model Nft {
  id             Int       @id @default(autoincrement())
  tokenId        String     @unique @map("token_id") 
  name           String
  description    String?
  imageUrl       String     @map("image_url")
  dna            String?     @unique
  metadata       Json       
  collectionId   Int        @map("collection_id")
  collection     NftCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  ownerWallet    String?     @map("owner_wallet")
  isMinted       Boolean     @default(false)

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  @@index([collectionId], name: "idx_nft_collection_id")
  @@index([tokenId], name: "idx_nft_token_id")
  @@index([ownerWallet], name: "idx_nft_owner_wallet")
  @@map("nfts")
}
